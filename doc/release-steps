update configure.ac allnet_api_version
  create corresponding ../released/allnet-v.major.minor directory for release
copy bin/AllNetUI.jar to src/gui/precompiled/
make sure git is up to date (git push)

distribute sources to: linux-64, linux-32, windows, mac
  for each, compile locally:
     ./autogen.sh
     ./configure --disable-openssl CFLAGS="-Wall -g -O2 -static"; make clean; make LDFLAGS="-all-static"
  copy back binaries
  make binary directories 
  make source directories, in the copy remove todo and doc/ios/*.gz
I haven't yet been able to figure out how to do static linking on macos,
so instead use the non-static build command:
     ./configure CFLAGS="-Wall -g -O2" ; make clean ; make

To support Windows 10, the Windows version needs the GUI compiled for Java 8.
In ubuntu (maybe a virtual machine), uninstall openjdk-*-jre and openjdk-*-jdk
and instead install openjdk-8-jre and openjdk-8-jdk, then compile, and
just include the bin/AllNetUI.jar as AllNetUI.java8.jar.  There is no need
to build the AllNetUI on a windows box.

compile for iOS on xcode
  https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html

  set the version number and copyright year in the preview screen
  set the bundle ID under General/Identity/Version
  set Product/Destination to "Any iOS Device"
       if necessary, start with Product/Scheme/New Scheme
  Product/Scheme/Edit Scheme /  left-menu-Archive
     set build configuration to 'Release' if necessary, then close
  Product/Archive
     Validate -- (if needed, certificates are at https://developer.apple.com)
     Distribute App (was: Upload to App Store)
  log in to itunes connect
    https://itunesconnect.apple.com/
      click on the app name
    App Store click "+ Version", add the new version and a description
      of the update, select a build (+ Build),
      verify everything
    Save at the top, then Submit for Review
      (wait for review to complete)

compile for arm:
  sudo apt install gcc-arm-linux-gnueabi libc6-dev-i386 autoconf libtool autotools-dev pkg-config libssl-dev

  ./autogen.sh
  ./configure --disable-shared --host=arm-linux-gnueabi --disable-gui --disable-network-manager --disable-openssl CFLAGS="-I/usr/local/include -static"
  make LDFLAGS="-all-static"

note: I included disable-openssl because I haven't been able to link
openssl with this cross-compiler and my ARM platform (see below for
details).  You may wish to try first without disable-openssl -- if you
are successful, encryption and decryption will be much faster (but
not as dramatically since version 3.3.0 switched to AES rather than RSA).

note: if you built your openssl cross-compiled for ARM, you probably need:
in openssl (after downloading it from openssl.org and verifying it)
  ./Configure -static linux-armv4 --prefix=/usr/local/openssl --openssldir=/usr/local/openssl
  make CC=arm-linux-gnueabi-gcc LDFLAGS="-all-static"
in allnet:
  ./configure --enable-static --disable-shared --host=arm-linux-gnueabi --disable-gui --disable-network-manager CFLAGS="-I/usr/local/include -I/usr/local/openssl/include -L/usr/local/openssl/lib -static -DHAVE_OPENSSL_ONE_ONE"
However, I haven't been able to figure out how to really make the
executable static, and chances are that the version of libc on the
target system will be incompatible with the version of openssl or
libressl that you cross-compiled :(
Fix for now is to compile with --disable-openssl, which slows down
all crypto operations.  :(

  copy back binaries
  make binary directory 

An alternative is to build on the raspberry pi, but as of 2021, this
version doesn't seem to work, so I leave the instructions below just in
case they are useful in the future:

The result of building on the raspberry pi is only independent of local
libraries with the following configure:
  CC='musl-gcc' ./configure --prefix=/usr/local/bin --disable-openssl --disable-shared CFLAGS="-Wall -Wshadow -g -static -static-libgcc"
Yes, this means using the musl-gcc wrapper around gcc (see
https://musl.libc.org or https://www.musl-libc.org/).  And "file bin/*"
still thinks the files are dynamically linked.
