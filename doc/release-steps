update configure.ac allnet_api_version
  create corresponding ../allnet-v.major.minor directory for release
copy bin/AllNetUI.jar to src/gui/precompiled/
make sure git is up to date (git push)

distribute sources to: linux-64, linux-32, windows, mac
  for each, compile locally:
     ./autogen.sh
     ./configure --disable-shared --enable-static CFLAGS="-Wall -g -O2"
     make clean
     make
  copy back binaries
  make binary directories 

compile for iOS on xcode
  https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/SubmittingYourApp/SubmittingYourApp.html

  set the bundle ID under General/Identity/Version
  set Product/Destination to "generic ios device"
  Product/Scheme/Edit Scheme /  left-menu-Archive
     set build configuration to 'Release' if necessary, then close
  Product/Archive
     Validate -- (if needed, certificates are at https://developer.apple.com)
     Upload to App Store
  log in to itunes connect
    https://itunesconnect.apple.com/
      click on the app name
    my apps/Activity --- should have newly uploaded version (may have to wait
      if it is still processing)
    my apps/App Store click "+ Version or Platform", iOS, add the new version
      info and a description of the update, select a build (+ Build),
      verify everything
    Save at the top, then Submit for Review
      (wait for review to complete)

compile for arm:
  sudo apt install gcc-arm-linux-gnueabi libc6-dev-i386 autoconf libtool autotools-dev pkg-config libssl-dev

  ./autogen.sh
  ./configure --disable-shared --host=arm-linux-gnueabi --disable-gui --disable-network-manager --disable-openssl CFLAGS="-I/usr/local/include -static"
  make

note: I included disable-openssl because I haven't been able to link
openssl with this cross-compiler and my ARM platform (see below for
details).  You may wish to try first without disable-openssl -- if you
are successful, encryption and decryption will be much faster.

note: if you built your openssl cross-compiled for ARM, you probably need:
in openssl (after downloading it from openssl.org and verifying it)
  ./Configure -static linux-armv4 --prefix=/usr/local/openssl --openssldir=/usr/local/openssl
  make CC=arm-linux-gnueabi-gcc
in allnet:
  ./configure --enable-static --disable-shared --host=arm-linux-gnueabi --disable-gui --disable-network-manager CFLAGS="-I/usr/local/include -I/usr/local/openssl/include -L/usr/local/openssl/lib -static -DHAVE_OPENSSL_ONE_ONE"
However, I haven't been able to figure out how to really make the
executable static, and chances are that the version of libc on the
target system will be incompatible with the version of openssl or
libressl that you cross-compiled :(
Fix for now is to compile with --disable-openssl, which slows down
all crypto operations.  :(

  copy back binaries
  make binary directory 

Note -- an alternative is to build on the raspberry pi.  The result is
only independent of local libraries with the following configure:
  CC=musl-gcc ./configure --disable-openssl --disable-shared CFLAGS="-Wall -Wshadow -g -static -static-libgcc"
Yes, this means using the musl-gcc wrapper around gcc (see
http://www.musl-libc.org/).  And "file bin/trace" still thinks trace is
dynamically linked (and the rest too).
